<?php
// auto-generated by sfPropelCrud
// date: 2006/08/15 03:52:09
?>
<?php
include_once('propel/util/Criteria.php');

/**
 * utente actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage utente
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 1415 2006-06-11 08:33:51Z fabien $
 */
class utenteActions extends sfActions
{
  public function executeIndex ()
  {
    return $this->forward('utente', 'show');
  }

  /*public function executeList ()
  {
    $this->utentes = UtentePeer::doSelect(new Criteria());
  }*/

  public function executeShow ()
  {
    $this->utente = UtentePeer::retrieveByPk($this->getUser()->getAttribute('id_utente'));
    $this->forward404Unless($this->utente);
  }

  public function executeCreate ()
  {
  	/*if($this->getUser()->isAuthenticated())
  	return $this->forward('main','index');*/

  	//require_once sfConfig::get('sf_app_dir').DIRECTORY_SEPARATOR.'lib/jpgraph/src/jpgraph_antispam.php';
    //$antispam = new AntiSpam();
    //$antispam_string = $antispam->rand(5);
    //$this->getUser()->setAttribute('antispam', $antispam_string);

    $this->utente = new Utente();

    $this->setTemplate('edit');
  }

  public function executeEdit ()
  {
    $this->utente = UtentePeer::retrieveByPk($this->getUser()->getAttribute('id_utente'));
    $this->forward404Unless($this->utente);
    $this->form = new UtenteForm($this->utente);
  }

  public function executeUpdate ()
  {
    if (!$this->getRequestParameter('id', 0))
    {
      $utente = new Utente();
    }
    else
    {
      $utente = UtentePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($utente);
    }

    //$utente->setId($this->getUser()->getAttribute('id_utente'));
    //$utente->setUsername($this->getRequestParameter('username'));
    $utente->setNome(stripcslashes($this->getRequestParameter('nome')));
    $utente->setCognome(stripcslashes($this->getRequestParameter('cognome')));
    $utente->setRagioneSociale(stripcslashes($this->getRequestParameter('ragione_sociale')));
    $utente->setPartitaIva($this->getRequestParameter('partita_iva'));
    $utente->setCodiceFiscale(strtoupper($this->getRequestParameter('codice_fiscale')));
    $utente->setEmail($this->getRequestParameter('email'));

    if($this->getRequestParameter('password')!="")
    	$utente->setPassword($this->getRequestParameter('password'));

    $utente->save();

    $this->getRequest()->setAttribute('success','Profilo modificato con successo');
    return $this->forward('utente','edit');
  }

  public function executeRegister ()
  {
  	if($this->getUser()->isAuthenticated())
  	return $this->forward('main','index');

  	$this->forward404Unless($this->hasRequestParameter('id'));

    $utente = new Utente();
    $utente->setId($this->getRequestParameter('id'));
    $utente->setUsername(strtolower($this->getRequestParameter('username')));
    $utente->setNome(stripcslashes($this->getRequestParameter('nome')));
    $utente->setCognome(stripcslashes($this->getRequestParameter('cognome')));
    /*$utente->setRagioneSociale(stripcslashes($this->getRequestParameter('ragione_sociale')));
    $utente->setPartitaIva($this->getRequestParameter('partita_iva'));
    $utente->setCodiceFiscale(strtoupper($this->getRequestParameter('codice_fiscale')));*/
    $utente->setEmail($this->getRequestParameter('email'));
    $utente->setPassword($this->getRequestParameter('password'));
    $utente->setDataAttivazione(date('y-m-d',time()));
    $utente->setDataRinnovo(date('y-m-d',time()));
    $utente->setApprovaContratto($this->getRequestParameter('contratto'));
    $utente->setApprovaPolicy($this->getRequestParameter('privacy'));

    $criteria = new Criteria();
    $criteria->add(InvitationCodePeer::CODICE ,$this->getRequestParameter('id_codice'));
    //$invitation_code = InvitationCodePeer::doSelectOne($criteria);
    //$utente->setIdInvitationCode($invitation_code->getId());

//    $utente->setTipo($this->getRequestParameter('tipo'));
//    $utente->setFattura($this->getRequestParameter('fattura'));

    $utente->save();

    $impostazioni = new Impostazione();
    $impostazioni->setIdUtente($utente->getId());
    $impostazioni->save();

    //TemaFatturaPeer::createDefault($utente->getId());
    //BancaPeer::createDefault($utente->getId());

    CodiceIvaPeer::inserisciDefault($utente->getId());
    ModoPagamentoPeer::inserisciDefault($utente->getId());

    //Invio email di nuova registrazione
    $this->newregistrationmail($utente);

    $this->getRequest()->setAttribute('success','Registrazione avvenuta con successo.');
    return $this->forward('login','index');
  }

  /*public function executeDelete ()
  {
    $utente = UtentePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($utente);

    $utente->delete();

    return $this->redirect('utente/list');
  }*/

  public function handleErrorRegister()
  {
    $this->forward('utente', 'create');
  }

  public function handleErrorUpdate()
  {
    $this->forward('utente', 'edit');
  }

  public function handleErrorCodesend()
  {
    $this->forward('utente', 'askcode');
  }

  public function handleErrorSendpassword()
  {
    $this->forward('utente', 'forgetpassword');
  }

  // action that executes the actual image
  public function executeAntispam() {
      if (!$string = $this->getUser()->getAttribute('antispam')) {
          return sfView::NONE;
      }

      require_once sfConfig::get('sf_app_dir').DIRECTORY_SEPARATOR.'lib/jpgraph/src/jpgraph_antispam.php';
      $this->getResponse()->setContentType('image/jpeg');
      $antispam = new AntiSpam($string);
      echo $antispam->stroke();
      return sfView::NONE;
  }

  public function executeUpgrade(){
  	$utente = UtentePeer::getUtenteCorrente();
  	$this->sconto = $utente->getSconto();
  	$this->prezzo = sfConfig::get('app_prezzo_base');
  	$this->sconto_value = 20;
  	if($this->sconto == 1){
  		$this->prezzo_scontato = $this->prezzo - ($this->prezzo/100)*$this->sconto_value;
  		$this->prezzo_totale_scontato = number_format($this->prezzo_scontato,1)*12;
  	}
  	$this->prezzo_totale = $this->prezzo*12;
  	$this->message = '<span style="color: #BF0000;font-weight: bold;font-size: 110%;">PROMOZIONE BUG:</span> ci hai segnalato un bug e questo ti ha dato diritto al <strong>'.$this->sconto_value.'% di sconto</strong> sull\'acquisto del servizio.';

  }

  public function executeAskcode(){

  }

public function newregistrationmail($utente){
	$mail = new sfMail();
        $mail->initialize();
	$mail->setMailer('sendmail');
	$mail->setCharset('utf-8');

	// definition of the required parameters
	$mail->setSender(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));
	$mail->setFrom(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));

	$mail->addAddress(sfConfig::get('app_admin_email'));

	$mail->setSubject('[PIM On-Line] - Nuovo utente registrato');
	$mail->setBody('Ciao Administrator,

un nuovo utente si e\' registrato al servizio PIM-Online:
Nome: '.$utente->getNome().'
Cognome: '.$utente->getCognome().'
Email: '.$utente->getEmail().'

Lo Staff di PIM On-Line
--
AutoMailer PIM On-Line Invitation Code Request');

	// send the email
	$mail->send();
}

  public function executeCodesend(){
  	$mail = new sfMail();
  	$mail->initialize();
  	$mail->setMailer('sendmail');
  	$mail->setCharset('utf-8');

  	// definition of the required parameters
  	$mail->setSender(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));
  	$mail->setFrom(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));

 	$mail->addAddress(sfConfig::get('app_admin_email'));

  	$mail->setSubject('[PIM On-line] Richiesta Codice d\'Invito PIM On-Line');
  	$mail->setBody('Ciao Administrator,

E\' appena arrivata una richiesta di codice d\'invito da '.$this->getRequestParameter('email').'.

Lo Staff di PIM On-Line
--
AutoMailer PIM On-Line Invitation Code Request');

  	// send the email
  	$mail->send();

  	$this->getRequest()->setParameter('success','Richiesta codice d\'invito inviata con successo');
  	$this->forward('utente','askcode');
  }

  public function executeForgetpassword(){

  }

  public function executeSendpassword(){
  	$criteria = new Criteria();
  	$criteria->add(UtentePeer::USERNAME , $this->getRequestParameter('username'));

  	$utente = UtentePeer::doSelectOne($criteria);
  	$password = Utente::generatePassword();

  	$utente->setPassword($password);
  	$utente->save();

  	$mail = new sfMail();
  	$mail->initialize();
  	$mail->setMailer('sendmail');
  	$mail->setCharset('utf-8');

  	// definition of the required parameters
  	$mail->setSender(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));
  	$mail->setFrom(sfConfig::get('app_admin_from'), sfConfig::get('app_admin_label'));

 	$mail->addAddress($utente->getEmail());

  	$mail->setSubject('[PIM On-line] Richiesta Password PIM On-Line');
  	$mail->setBody('Gentile '.$utente->getNome().' '.$utente->getCognome().',

Ecco la sua nuova password per accedere al servizio PIM On-Line: '.$password.'

Cordiali Saluti

Lo Staff di PIM On-Line
--
AutoMailer PIM On-Line Password Request');

  	// send the email
  	$mail->send();
  	$this->getRequest()->setParameter('success','Password inviata con successo');
  	$this->forward('utente','forgetpassword');
  }

  public function executeRinnova(){
  	$this->utente = UtentePeer::getUtenteCorrente();
  }
}

/*
class myCharactersValidator extends sfValidator
{
	public function execute (&$value, &$error)
	{
		$string = sfContext::getInstance()->getUser()->getAttribute('antispam');
		if ($value != $string) {

			// generate a new image....
			require_once sfConfig::get('sf_app_dir').DIRECTORY_SEPARATOR.'lib/jpgraph/src/jpgraph_antispam.php';
			$antispam = new AntiSpam();
			$antispam_string = $antispam->rand(5);
			sfContext::getInstance()->getUser()->setAttribute('antispam', $antispam_string);

			$error = $this->getParameter('characters_error');
			return false;
		}
		return true;
	}
}

class invitationCodeValidator extends sfValidator
{
	public function execute (&$value, &$error)
	{
		$criteria = new Criteria();
		$criteria->add(InvitationCodePeer::CODICE ,sfContext::getInstance()->getRequest()->getParameter('id_codice'));
		if(InvitationCodePeer::doCount($criteria) > 0){
			$count = UtentePeer::doCountJoinInvitationCode($criteria);
			if ($count > 0) {
				$error = $this->getParameter('error');
				return false;
			}
		}else{
			$error = $this->getParameter('error');
			return false;
		}
		return true;
	}
}

class usernameValidator extends sfValidator
{
	public function execute (&$value, &$error)
	{
		$criteria = new Criteria();
		$criteria->add(UtentePeer::USERNAME , sfContext::getInstance()->getRequest()->getParameter('username'));
		if(UtentePeer::doCount($criteria) == 0){
				$error = $this->getParameter('username_error');
				return false;
		}
		return true;
	}
}
*/
